CLASSE USUARIOS:

public class Usuario {
private String nome;
private String email;
private String cidade;

public Usuario(String nome, String email, String cidade) {
    this.nome = nome;
    this.email = email;
    this.cidade = cidade;
}

public String getNome() {
    return nome;
}

public String getEmail() {
    return email;
}

public String getCidade() {
    return cidade;
}

@Override
public String toString() {
    return "Nome: " + nome + ", Email: " + email + ", Cidade: " + cidade;
}
}

=============================================================================================

CLASSE EVENTOS:

import java.time.LocalDateTime;

public class Evento {
private String nome;
private String endereco;
private String categoria;
private LocalDateTime horario;
private String descricao;
private boolean participando;

public Evento(String nome, String endereco, String categoria, LocalDateTime horario, String descricao) {
    this.nome = nome;
    this.endereco = endereco;
    this.categoria = categoria;
    this.horario = horario;
    this.descricao = descricao;
    this.participando = false;
}

public String getNome() {
    return nome;
}

public LocalDateTime getHorario() {
    return horario;
}

public String getCategoria() {
    return categoria;
}

public String getEndereco() {
    return endereco;
}

public String getDescricao() {
    return descricao;
}

public boolean isParticipando() {
    return participando;
}

public void confirmarParticipacao() {
    this.participando = true;
}

public void cancelarParticipacao() {
    this.participando = false;
}

public boolean isEventoPassado() {
    return LocalDateTime.now().isAfter(horario);
}

@Override
public String toString() {
    return "Evento: " + nome + " - " + categoria + " - " + endereco + " - " + descricao + " - " + horario;
}
}

=============================================================================================

CLASSE DE GERENCIAMENTO DO EVENTO:

import java.io.;
import java.util.;

public class EventoManager {
private List eventos;

public EventoManager() {
    eventos = new ArrayList<>();
    carregarEventos();
}

public void carregarEventos() {
    try (BufferedReader br = new BufferedReader(new FileReader("events.data"))) {
        String linha;
        while ((linha = br.readLine()) != null) {
            String[] dados = linha.split(",");
            String nome = dados[0];
            String endereco = dados[1];
            String categoria = dados[2];
            LocalDateTime horario = LocalDateTime.parse(dados[3]);
            String descricao = dados[4];
            Evento evento = new Evento(nome, endereco, categoria, horario, descricao);
            eventos.add(evento);
        }
    } catch (IOException e) {
        System.out.println("Erro ao carregar eventos: " + e.getMessage());
    }
}

public void salvarEventos() {
    try (BufferedWriter bw = new BufferedWriter(new FileWriter("events.data"))) {
        for (Evento evento : eventos) {
            bw.write(evento.getNome() + "," + evento.getEndereco() + "," + evento.getCategoria() + "," +
                     evento.getHorario() + "," + evento.getDescricao());
            bw.newLine();
        }
    } catch (IOException e) {
        System.out.println("Erro ao salvar eventos: " + e.getMessage());
    }
}

public void cadastrarEvento(Evento evento) {
    eventos.add(evento);
    salvarEventos();
}

public List<Evento> listarEventos() {
    return eventos;
}

public List<Evento> eventosFuturos() {
    List<Evento> futuros = new ArrayList<>();
    for (Evento evento : eventos) {
        if (!evento.isEventoPassado()) {
            futuros.add(evento);
        }
    }
